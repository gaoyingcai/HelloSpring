<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    
   <!-- 
   **************Spring 基于构造函数的依赖注入**************
   如果存在不止一个参数时，当把参数传递给构造函数时，可能会存在歧义。要解决这个问题，那么构造函数的参数在 bean 定义中的顺序就是把这些参数提供给适当的构造函数的顺序就可以了。
   如果你想要向一个对象传递一个引用，你需要使用 标签的 ref 属性，如果你想要直接传递值，那么你应该使用如上所示的 value 属性
   如果你使用 type 属性显式的指定了构造函数参数的类型，容器也可以使用与简单类型匹配的类型。
   最后并且也是最好的传递构造函数参数的方式，使用 index 属性来显式的指定构造函数参数的索引。
   -->
  <!--  
  <bean id="textEditor" class="com.injection.TextEditor">
      <constructor-arg ref="spellChecker"/>
      <constructor-arg type="java.lang.String" value="Zara"/>
      <constructor-arg index="2" value="Tom"/>index 可以指定参数下标
   </bean>
   <bean id="spellChecker" class="com.injection.SpellChecker">
   </bean> 
   -->
   
   <!-- 
   **************Spring 设置函数的依赖注入**************
   你应该注意定义在基于构造函数注入和基于设值函数注入中的 Beans.xml 文件的区别。唯一的区别就是在基于构造函数注入中，我们使用的是〈bean〉标签中的〈constructor-arg〉元素，
   而在基于设值函数的注入中，我们使用的是〈bean〉标签中的〈property〉元素。
   第二个你需要注意的点是，如果你要把一个引用传递给一个对象，那么你需要使用 标签的 ref 属性，而如果你要直接传递一个值，那么你应该使用 value 属性。
   -->
   <!-- <bean id="textEditor2" class="com.injection.TextEditor2">
      <property name="spellChecker" ref="spellChecker"/>
   </bean>
   <bean id="spellChecker" class="com.injection.SpellChecker">
   </bean> -->
   <!-- 如果你有许多的设值函数方法，那么在 XML 配置文件中使用 p-namespace 是非常方便的。 比如上面还可以这样实现-->
   <!-- 使用 p-namespace 需要配置 xmlns:p="http://www.springframework.org/schema/p" -->
   <!-- <bean id="textEditor2" class="com.injection.TextEditor2"
   		p:spellChecker-ref="spellChecker">-ref 部分表明这不是一个直接的值，而是对另一个 bean 的引用。
   </bean>
   <bean id="spellChecker" class="com.injection.SpellChecker">
   </bean> -->
   
   <!-- 
   **************Spring 注入内部Beans**************
   正如你所知道的 Java 内部类是在其他类的范围内被定义的，同理，inner beans 是在其他 bean 的范围内定义的 bean。因此在 或 元素内 元素被称为内部bean
   -->
   <bean id="textEditor2" class="com.injection.TextEditor2">
      <property name="spellChecker">
         <bean id="spellChecker" class="com.injection.SpellChecker"/>
       </property>
   </bean>
   
   
   <!-- 
   **************Spring 注入集合**************
   -->
   <!--  
   <bean id="javaCollection" class="com.injection.JavaCollection">

      <property name="addressList">
         <list>
            <value>INDIA</value>
            <value>Pakistan</value>
            <value>USA</value>
            <value>USA</value>
         </list>
      </property>
      <property name="addressSet">
         <set>
            <value>INDIA</value>
            <value>Pakistan</value>
            <value>USA</value>
            <value>USA</value>
        </set>
      </property>

      <property name="addressMap">
         <map>
            <entry key="1" value="INDIA"/>
            <entry key="2" value="Pakistan"/>
            <entry key="3" value="USA"/>
            <entry key="4" value="USA"/>
         </map>
      </property>
      <property name="addressProp">
         <props>
            <prop key="one">INDIA</prop>
            <prop key="two">Pakistan</prop>
            <prop key="three">USA</prop>
            <prop key="four">USA</prop>
         </props>
      </property>

   </bean>
   -->
   
   <bean id="javaCollection" class="com.injection.JavaCollection">
   
      <property name="addressList">
         <list>
            <ref bean="address"/>
            <ref bean="address2"/>
            <value>Pakistan</value>
         </list>
      </property>
      <property name="addressSet">
         <set>
            <ref bean="address"/>
            <ref bean="address2"/>
            <value>Pakistan</value>
         </set>
      </property>

      <property name="addressMap">
         <map>
            <entry key="one" value="INDIA"/>
            <entry key ="two" value-ref="address"/>
            <entry key ="three" value-ref="address2"/>
         </map>
      </property>

   </bean>
   
   <bean name="address" class="com.injection.Address">
       <property name="name" value="the world"/>
   </bean>
   <bean name="address2" class="com.injection.Address2">
       <property name="code" value="123456"/>
   </bean>


	<!-- 
	注入 null 和空字符串的值
	<bean id="..." class="exampleBean">
	   <property name="email" value=""/>
	</bean>
	<bean id="..." class="exampleBean">
	   <property name="email"><null/></property>
	</bean>
	-->
</beans>